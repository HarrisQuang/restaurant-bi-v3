{"version":3,"sources":["App.tsx","MyComponent.tsx","index.tsx"],"names":["RangePicker","DatePicker","App","_useState","useState","_useState2","_slicedToArray","dates","setDates","_useState3","_useState4","value","setValue","_useState5","_useState6","isOpen","setIsOpen","ref","useRef","ant_picker","document","querySelector","useEffect","console","log","current","window","innerWidth","style","overflow","height","offsetWidth","Streamlit","setFrameHeight","_jsx","children","disabledDate","tooLate","diff","onCalendarChange","val","onChange","setComponentValue","onOpenChange","open","changeOnBlur","MyComponent","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","numClicks","isFocused","render","props","theme","borderStyling","primaryColor","border","outline","_Fragment","onClicked","setState","prevState","_onFocus","_onBlur","_createClass","StreamlitComponentBase","withStreamlitConnection","ReactDOM","React","StrictMode","getElementById"],"mappings":"oPAKQA,EAAgBC,IAAhBD,YA+DOE,EA3DO,WACpB,IAAAC,EAA0BC,mBAAqB,MAAKC,EAAAC,YAAAH,EAAA,GAA7CI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,EAA0BL,mBAAqB,MAAKM,EAAAJ,YAAAG,EAAA,GAA7CE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,EAA4BT,oBAAkB,GAAMU,EAAAR,YAAAO,EAAA,GAA7CE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClBG,EAAMC,iBAAuB,MAC7BC,EAAaC,SAASC,cAAc,sBAkC1C,OAhBAC,qBAAU,WACRC,QAAQC,IAAIT,EAAQE,EAAIQ,SACrBC,OAAOC,WAAa,KAAOZ,GAAUE,EAAIQ,UAE1CN,EAAWS,MAAM,kBAA2B,SAC5CT,EAAWS,MAAMC,SAAW,OAC5BV,EAAWS,MAAME,OAAUb,EAAIQ,QAAQM,YAAe,MAEpDhB,EACFiB,IAAUC,eAAe,KAGzBD,IAAUC,gBAEd,IAGEC,cAAA,OAAKjB,IAAKA,EAAIkB,SACZD,cAAClC,EAAW,CACZW,MAAOJ,GAASI,EAChByB,aArCiB,SAACX,GACpB,IAAKlB,EACH,OAAO,EAET,IAAM8B,EAAU9B,EAAM,IAAMkB,EAAQa,KAAK/B,EAAM,GAAI,SAAW,EAE9D,SADiBA,EAAM,IAAMA,EAAM,GAAG+B,KAAKb,EAAS,SAAW,MACxCY,CACzB,EA+BIE,iBAAkB,SAACC,GACjBhC,EAASgC,EACX,EACAC,SAAU,SAACD,GACTjB,QAAQC,IAAI,SACZZ,EAAS4B,GACTR,IAAUU,kBAAkBF,EAC9B,EACAG,aArCiB,SAACC,GACpB5B,EAAU4B,GAERpC,EADEoC,EACO,CAAC,KAAM,MAEP,KAEb,EA+BIC,cAAY,KAIlB,EC/CMC,EAAW,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,IAAAK,EAAAC,YAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAwDd,OAxDcP,EAAAF,EAAAU,KAAAC,MAAAX,EAAA,OAAAY,OAAAL,KACRM,MAAQ,CAAEC,UAAW,EAAGC,WAAW,GAAOb,EAE1Cc,OAAS,WAGDd,EAAKe,MAAMV,KAAW,KAAnC,IAKQW,EAAUhB,EAAKe,MAAfC,MACFvC,EAA6B,CAAC,EAIpC,GAAIuC,EAAO,CAGT,IAAMC,EAAa,aAAAP,OACjBV,EAAKW,MAAME,UAAYG,EAAME,aAAe,QAE9CzC,EAAM0C,OAASF,EACfxC,EAAM2C,QAAUH,CAClB,CAOA,OACElC,cAAAsC,WAAA,CAAArC,SACED,cAAChC,EAAG,KAGV,EAEAiD,EACQsB,UAAY,WAGlBtB,EAAKuB,UACH,SAAAC,GAAS,MAAK,CAAEZ,UAAWY,EAAUZ,UAAY,EAAG,IACpD,kBAAM/B,IAAUU,kBAAkBS,EAAKW,MAAMC,UAAU,GAE3D,EAEAZ,EACQyB,SAAW,WACjBzB,EAAKuB,SAAS,CAAEV,WAAW,GAC7B,EAEAb,EACQ0B,QAAU,WAChB1B,EAAKuB,SAAS,CAAEV,WAAW,GAC7B,EAACb,CAAA,QAAA2B,YAAAhC,EAAA,CAxDc,CAASiC,KAgEXC,cAAwBlC,GC/EvCmC,IAAShB,OACP/B,cAACgD,IAAMC,WAAU,CAAAhD,SACfD,cAACY,EAAW,MAEd1B,SAASgE,eAAe,Q","file":"static/js/main.b270923c.chunk.js","sourcesContent":["import {Streamlit} from \"streamlit-component-lib\"\r\nimport { DatePicker } from 'antd';\r\nimport type { Dayjs } from 'dayjs';\r\nimport React, { useState, useEffect, useRef, MouseEvent  } from 'react';\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\ntype RangeValue = [Dayjs | null, Dayjs | null] | null;\r\n\r\nconst App: React.FC = () => {\r\n  const [dates, setDates] = useState<RangeValue>(null);\r\n  const [value, setValue] = useState<RangeValue>(null);\r\n  const [isOpen, setIsOpen] = useState<Boolean>(false);\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const ant_picker = document.querySelector('.ant-picker-panels') as HTMLElement;\r\n  const disabledDate = (current: Dayjs) => {\r\n    if (!dates) {\r\n      return false;\r\n    }\r\n    const tooLate = dates[0] && current.diff(dates[0], 'days') >= 7;\r\n    const tooEarly = dates[1] && dates[1].diff(current, 'days') >= 7;\r\n    return !!tooEarly || !!tooLate;\r\n  };\r\n\r\n  const onOpenChange = (open: boolean) => {\r\n    setIsOpen(open)\r\n    if (open) {\r\n      setDates([null, null]);\r\n    } else {\r\n      setDates(null);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(isOpen, ref.current)\r\n    if(window.innerWidth < 480 && isOpen && ref.current) {\r\n      // console.log(\"vô tới đây rồi nè\")\r\n      ant_picker.style[\"flex-direction\" as any] = 'column'\r\n      ant_picker.style.overflow = 'auto'\r\n      ant_picker.style.height = (ref.current.offsetWidth) + 'px'\r\n    }\r\n    if (isOpen) {\r\n      Streamlit.setFrameHeight(350)\r\n    }\r\n    else {\r\n      Streamlit.setFrameHeight()\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <RangePicker\r\n      value={dates || value}\r\n      disabledDate={disabledDate}\r\n      onCalendarChange={(val) => {\r\n        setDates(val);\r\n      }}\r\n      onChange={(val) => {\r\n        console.log('Vy ne')\r\n        setValue(val);\r\n        Streamlit.setComponentValue(val)\r\n      }}\r\n      onOpenChange={onOpenChange}\r\n      changeOnBlur\r\n    />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport App from \"./App\";\n\n\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    \n    return (\n      <> \n        <App/>\n      </>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}